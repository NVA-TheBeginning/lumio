// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "../../../node_modules/@prisma-project"
  previewFeatures = ["multiSchema"]
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

/// === ENUMS ===

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["project_schema"]
}

enum ProjectStatus {
  VISIBLE
  DRAFT
  HIDDEN

  @@schema("project_schema")
}

/// === MODELS ===

enum GroupMode {
  RANDOM
  MANUAL
  FREE

  @@schema("project_schema")
}

model Project {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  description String    @db.Text
  creatorId   Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime? @db.Timestamptz(6)

  projectPromotions ProjectPromotion[] @relation("ProjectToPromotion")

  @@index([creatorId])
  @@map("PROJECTS")
  @@schema("project_schema")
}

model Promotion {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  description String   @db.Text
  creatorId   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  projectPromotions ProjectPromotion[] @relation("PromotionToProject")
  studentPromotions StudentPromotion[] @relation("PromotionToStudent")

  @@index([creatorId])
  @@map("PROMOTIONS")
  @@schema("project_schema")
}

model StudentPromotion {
  promotionId Int
  userId      Int
  addedAt     DateTime @default(now())

  promotion Promotion @relation("PromotionToStudent", fields: [promotionId], references: [id], onDelete: Cascade)

  @@id([promotionId, userId])
  @@map("STUDENT_PROMOTIONS")
  @@schema("project_schema")
}

model ProjectPromotion {
  projectId   Int
  promotionId Int
  status      ProjectStatus @default(DRAFT)
  createdAt   DateTime      @default(now())

  project       Project        @relation("ProjectToPromotion", fields: [projectId], references: [id], onDelete: Cascade)
  promotion     Promotion      @relation("PromotionToProject", fields: [promotionId], references: [id], onDelete: Cascade)
  groupSettings GroupSettings?
  groups        Group[]

  @@id([projectId, promotionId])
  @@map("PROJECT_PROMOTIONS")
  @@schema("project_schema")
}

model Group {
  id          Int      @id @default(autoincrement())
  projectId   Int
  promotionId Int
  name        String   @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  projectPromotion ProjectPromotion @relation(fields: [projectId, promotionId], references: [projectId, promotionId])
  members          GroupMember[]

  @@index([promotionId])
  @@map("GROUPS")
  @@schema("project_schema")
}

model GroupMember {
  groupId   Int
  studentId Int
  addedAt   DateTime @default(now())

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([groupId, studentId])
  @@map("GROUP_MEMBERS")
  @@schema("project_schema")
}

model GroupSettings {
  projectId   Int
  promotionId Int
  minMembers  Int
  maxMembers  Int
  mode        GroupMode @default(RANDOM)
  deadline    DateTime  @db.Timestamptz(6)
  updatedAt   DateTime  @updatedAt

  projectPromotion ProjectPromotion @relation(fields: [projectId, promotionId], references: [projectId, promotionId], onDelete: Cascade)

  @@id([projectId, promotionId])
  @@map("GROUP_SETTINGS")
  @@schema("project_schema")
}
